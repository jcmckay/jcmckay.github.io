{"version":3,"sources":["card/index.jsx","use-draggable.jsx","App.js","serviceWorker.js","index.js"],"names":["Cards","react_default","a","createElement","Fragment","Card","suit","displayValue","value","_ref","_useDraggable","_useState","useState","_useState2","Object","slicedToArray","isDragging","setIsDragging","_useState3","x","y","_useState4","position","setPosition","_useState5","_useState6","relativePosition","setRelativePosition","onMouseUp","e","stopPropagation","preventDefault","onMouseMove","pageX","pageY","useEffect","document","addEventListener","removeEventListener","left","top","button","useDraggable","_useDraggable2","style","onDragging","suitUnicodeMap","hearts","diamonds","spades","clubs","className","objectSpread","color","includes","onMouseDown","concat","Array","from","val","i","key","width","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.203561e2.chunk.js","sourcesContent":["import React from 'react';\nimport useDraggable from '../use-draggable';\nimport './styles.css';\n\nexport function Cards() {\n  return (\n    <>\n      <Card suit=\"clubs\" displayValue=\"4\" value={4} />\n      <Card suit=\"diamonds\" displayValue=\"6\" value={6} />\n      <Card suit=\"spades\" displayValue=\"2\" value={2} />\n      <Card suit=\"hearts\" displayValue=\"8\" value={8} />\n    </>\n  );\n}\n\nexport default function Card({ suit, displayValue, value }) {\n  let [style, onDragging] = useDraggable();\n\n  let suitUnicodeMap = {\n    hearts: '\\u2665',\n    diamonds: '\\u2666',\n    spades: '\\u2660',\n    clubs: '\\u2663'\n  };\n\n  let suitIconWidth = () => {\n    if (value < 4) {\n      return 100;\n    } else {\n      return 50;\n    }\n  };\n\n  return (\n    <div className=\"card\" style={{ color: ['diamonds', 'hearts'].includes(suit) ? 'red' : 'black', ...style }} onMouseDown={onDragging}>\n      <div className=\"left col\">\n        <div className=\"display-number\">{`${displayValue}`}</div>\n      </div>\n      <div className=\"center col\">\n        {Array.from(Array(value), (val, i) => {\n          return (\n            <div key={val + suit + i} className=\"suit\" style={{ width: `${suitIconWidth()}%` }}>\n              {suitUnicodeMap[suit]}\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"right col\">\n        <div className=\"display-number\">{`${displayValue}`}</div>\n      </div>\n    </div>\n  );\n}\n","// The drag and drop functionality is found on stack overflow\n// https://stackoverflow.com/questions/20926551/recommended-way-of-making-react-component-div-draggable\n\nimport { useState, useEffect } from 'react';\n\nexport default function UseDraggable() {\n  let [isDragging, setIsDragging] = useState(false);\n  let [position, setPosition] = useState({ x: 0, y: 0 });\n  let [relativePosition, setRelativePosition] = useState(null);\n\n  let onMouseDown = function(e) {\n    if (e.button !== 0) return;\n    // var pos = { x: e.target.offsetLeft, y: e.target.offsetTop };\n    setIsDragging(true);\n    setRelativePosition({\n      x: e.pageX - position.x,\n      y: e.pageY - position.y\n    });\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  let onMouseUp = function(e) {\n    setIsDragging(false);\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  let onMouseMove = function(e) {\n    if (!isDragging) return;\n    setPosition({\n      x: e.pageX - relativePosition.x,\n      y: e.pageY - relativePosition.y\n    });\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  useEffect(\n    () => {\n      document.addEventListener('mousemove', onMouseMove);\n      document.addEventListener('mouseup', onMouseUp);\n\n      return () => {\n        document.removeEventListener('mousemove', onMouseMove);\n        document.removeEventListener('mouseup', onMouseUp);\n      };\n    },\n    [isDragging]\n  );\n\n  return [\n    {\n      // position: position.x + position.y === 0 ? 'relative' : 'absolute',\n      position: 'absolute',\n      left: position.x + 'px',\n      top: position.y + 'px'\n    },\n    onMouseDown\n  ];\n}\n","import React, { Component } from 'react';\nimport { Cards } from './card';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Cards />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}