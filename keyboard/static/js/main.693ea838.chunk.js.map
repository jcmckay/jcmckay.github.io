{"version":3,"sources":["components/key/index.tsx","components/keyboard/index.tsx","components/play-back-controls/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Key","props","color","onKeyPress","onKeyRelease","style","isMobile","className","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","Keyboard","synth","Tone","Synth","toMaster","handleKeyRelease","triggerRelease","key","left","map","k","triggerAttack","handleKeyPress","PlayBackControls","useState","isPlaying","setIsPlaying","playBack","time","Time","note","dur","part","Part","event","triggerAttackRelease","start","loop","loopEnd","onClick","Transport","toggle","size","icon","faStop","faPlay","faCircle","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.693ea838.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport './styles.css';\n\nexport interface IKeyProps {\n  color?: string;\n  style?: object;\n  onKeyPress(): void;\n  onKeyRelease(): void;\n}\n\nconst Key: FC<IKeyProps> = props => {\n  const { color, onKeyPress, onKeyRelease, style } = props;\n  return isMobile ? (\n    <div className={`key ${color}`} style={style} onTouchStart={onKeyPress} onTouchEnd={onKeyRelease}></div>\n  ) : (\n    <div className={`key ${color}`} style={style} onMouseDown={onKeyPress} onMouseUp={onKeyRelease}></div>\n  );\n};\n\nexport default Key;\n","import React, { FC } from 'react';\nimport Key from '../key';\n// @ts-ignore\nimport Tone from 'tone';\nimport './styles.css';\n\nexport interface IKeyboardProps {}\nexport interface IKey {\n  key: string;\n  color?: string;\n  style?: object;\n}\n\nconst Keyboard: FC<IKeyboardProps> = props => {\n  const synth = new Tone.Synth().toMaster();\n\n  const handleKeyPress = (key: string) => {\n    synth.triggerAttack(key);\n  };\n\n  const handleKeyRelease = () => {\n    synth.triggerRelease();\n  };\n\n  const keys: IKey[] = [\n    { key: 'C4' },\n    { key: 'C#4', color: 'black', style: { left: '65px' } },\n    { key: 'D4' },\n    { key: 'Eb4', color: 'black', style: { left: '200px' } },\n    { key: 'E4' },\n    { key: 'F4' },\n    { key: 'F#4', color: 'black', style: { left: '432px' } },\n    { key: 'G4' },\n    { key: 'G#4', color: 'black', style: { left: '551px' } },\n    { key: 'A4' },\n    { key: 'Bb4', color: 'black', style: { left: '674px' } },\n    { key: 'B4' },\n    { key: 'C5' },\n    { key: 'C#5', color: 'black', style: { left: '909px' } },\n    { key: 'D5' },\n    { key: 'Eb5', color: 'black', style: { left: '1030px' } },\n    { key: 'E5' }\n  ];\n\n  return (\n    <div className=\"keyboard\">\n      {keys.map(k => (\n        <Key key={k.key} color={k.color} style={k.style} onKeyPress={() => handleKeyPress(k.key)} onKeyRelease={handleKeyRelease}></Key>\n      ))}\n    </div>\n  );\n};\n\nexport default Keyboard;\n","import React, { FC, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faCircle, faStop } from '@fortawesome/free-solid-svg-icons';\n// @ts-ignore\nimport Tone from 'tone';\nimport './styles.css';\n\nexport interface IPlayBackControls {}\n\nconst PlayBackControls: FC<IPlayBackControls> = props => {\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const playBack = [\n    // 1st Measure\n    {\n      time: Tone.Time('0:0:0'),\n      note: 'D3',\n      dur: '4n'\n    },\n    {\n      time: Tone.Time('0:1:0'),\n      note: 'F3',\n      dur: '8n.'\n    },\n    {\n      time: Tone.Time('0:1:3'),\n      note: 'D3',\n      dur: '8n'\n    },\n    {\n      time: Tone.Time('0:2:1'),\n      note: 'D3',\n      dur: '16n'\n    },\n    {\n      time: Tone.Time('0:2:2'),\n      note: 'G3',\n      dur: '8n'\n    },\n    {\n      time: Tone.Time('0:3:0'),\n      note: 'D3',\n      dur: '8n'\n    },\n    {\n      time: Tone.Time('0:3:2'),\n      note: 'C3',\n      dur: '8n'\n    },\n    // 2nd Measure\n    {\n      time: Tone.Time('1:0:0'),\n      note: 'D3',\n      dur: '4n'\n    },\n    {\n      time: Tone.Time('1:1:0'),\n      note: 'A3',\n      dur: '8n.'\n    },\n    {\n      time: Tone.Time('1:1:3'),\n      note: 'D3',\n      dur: '8n'\n    },\n    {\n      time: Tone.Time('1:2:1'),\n      note: 'D3',\n      dur: '16n'\n    },\n    {\n      time: Tone.Time('1:2:2'),\n      note: 'Bb3',\n      dur: '8n'\n    },\n    {\n      time: Tone.Time('1:3:0'),\n      note: 'A3',\n      dur: '8n'\n    },\n    {\n      time: Tone.Time('1:3:2'),\n      note: 'F3',\n      dur: '8n'\n    },\n    // 3rd Measure\n    {\n      time: Tone.Time('2:0:0'),\n      note: 'D3',\n      dur: '8n'\n    },\n    {\n      time: Tone.Time('2:0:2'),\n      note: 'A3',\n      dur: '8n'\n    },\n    {\n      time: Tone.Time('2:1:0'),\n      note: 'D4',\n      dur: '8n'\n    },\n    {\n      time: Tone.Time('2:1:2'),\n      note: 'D3',\n      dur: '16n'\n    },\n    {\n      time: Tone.Time('2:1:3'),\n      note: 'C3',\n      dur: '8n'\n    },\n    {\n      time: Tone.Time('2:2:1'),\n      note: 'C3',\n      dur: '16n'\n    },\n    {\n      time: Tone.Time('2:2:2'),\n      note: 'A2',\n      dur: '8n'\n    },\n    {\n      time: Tone.Time('2:3:0'),\n      note: 'E3',\n      dur: '8n'\n    },\n    {\n      time: Tone.Time('2:3:2'),\n      note: 'D3',\n      dur: '8n'\n    }\n  ];\n  var synth = new Tone.Synth().toMaster();\n\n  //pass in an array of events\n  var part = new Tone.Part(function(time: any, event: any) {\n    //the events will be given to the callback with the time they occur\n    synth.triggerAttackRelease(event.note, event.dur, time);\n  }, playBack);\n\n  //start the part at the beginning of the Transport's timeline\n  part.start(0);\n\n  //loop the part 3 times\n  part.loop = 1;\n  part.loopEnd = '4m';\n\n  const handlePlayClick = () => {\n    setIsPlaying(!isPlaying);\n    Tone.Transport.toggle();\n  };\n\n  return (\n    <div className=\"controls\">\n      <div className=\"play\" onClick={handlePlayClick}>\n        {isPlaying ? <FontAwesomeIcon size=\"lg\" icon={faStop} /> : <FontAwesomeIcon size=\"lg\" icon={faPlay} />}\n      </div>\n      <div className=\"record\">\n        <FontAwesomeIcon size=\"lg\" color=\"red\" icon={faCircle} />\n      </div>\n    </div>\n  );\n};\n\nexport default PlayBackControls;\n","import React from 'react';\nimport Keyboard from './components/keyboard';\nimport PlayBackControls from './components/play-back-controls';\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Keyboard />\n      <PlayBackControls />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}