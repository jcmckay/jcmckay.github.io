{"version":3,"sources":["components/key/index.tsx","components/keyboard/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Key","props","color","onMouseDown","onMouseUp","onTouchEnd","onTouchStart","style","className","Keyboard","synth","Tone","Synth","toMaster","handleMouseDown","key","triggerAttack","handleMouseUp","triggerRelease","left","map","k","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PA0BeA,G,WAdY,SAAAC,GAAU,IAC3BC,EAAmED,EAAnEC,MAAOC,EAA4DF,EAA5DE,YAAaC,EAA+CH,EAA/CG,UAAWC,EAAoCJ,EAApCI,WAAYC,EAAwBL,EAAxBK,aAAcC,EAAUN,EAAVM,MACjE,OACE,yBACEC,UAAS,cAASN,GAClBK,MAAOA,EACPD,aAAcA,EACdD,WAAYA,EACZF,YAAaA,EACbC,UAAWA,M,gBCoCFK,G,MA5CsB,SAAAR,GACnC,IAAMS,GAAQ,IAAIC,IAAKC,OAAQC,WAEzBC,EAAkB,SAACC,GACvBL,EAAMM,cAAcD,IAGhBE,EAAgB,WACpBP,EAAMQ,kBAmBR,OACE,yBAAKV,UAAU,YAjBI,CACnB,CAAEO,IAAK,MACP,CAAEA,IAAK,MAAOb,MAAO,QAASK,MAAO,CAAEY,KAAM,SAC7C,CAAEJ,IAAK,MACP,CAAEA,IAAK,MAAOb,MAAO,QAASK,MAAO,CAAEY,KAAM,UAC7C,CAAEJ,IAAK,MACP,CAAEA,IAAK,MACP,CAAEA,IAAK,MAAOb,MAAO,QAASK,MAAO,CAAEY,KAAM,UAC7C,CAAEJ,IAAK,MACP,CAAEA,IAAK,MAAOb,MAAO,QAASK,MAAO,CAAEY,KAAM,UAC7C,CAAEJ,IAAK,MACP,CAAEA,IAAK,MAAOb,MAAO,QAASK,MAAO,CAAEY,KAAM,UAC7C,CAAEJ,IAAK,MACP,CAAEA,IAAK,OAKCK,KAAI,SAAAC,GAAC,OACT,kBAAC,EAAD,CACEN,IAAKM,EAAEN,IACPb,MAAOmB,EAAEnB,MACTK,MAAOc,EAAEd,MACTD,aAAc,kBAAMQ,EAAgBO,EAAEN,MACtCV,WAAYY,EACZd,YAAa,kBAAMW,EAAgBO,EAAEN,MACrCX,UAAWa,UCtCNK,G,MARO,WACpB,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,SCKce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0c458aff.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport './styles.css';\n\nexport interface IKeyProps {\n  color?: string;\n  style?: object;\n  onMouseDown(): void;\n  onMouseUp(): void;\n  onTouchStart(): void;\n  onTouchEnd(): void;\n}\n\nconst Key: FC<IKeyProps> = props => {\n  const { color, onMouseDown, onMouseUp, onTouchEnd, onTouchStart, style } = props;\n  return (\n    <div\n      className={`key ${color}`}\n      style={style}\n      onTouchStart={onTouchStart}\n      onTouchEnd={onTouchEnd}\n      onMouseDown={onMouseDown}\n      onMouseUp={onMouseUp}\n    ></div>\n  );\n};\n\nexport default Key;\n","import React, { FC } from 'react';\nimport Key from '../key';\n// @ts-ignore\nimport Tone from 'tone';\nimport './styles.css';\n\nexport interface IKeyboardProps {}\nexport interface IKey {\n  key: string;\n  color?: string;\n  style?: object;\n}\n\nconst Keyboard: FC<IKeyboardProps> = props => {\n  const synth = new Tone.Synth().toMaster();\n\n  const handleMouseDown = (key: string) => {\n    synth.triggerAttack(key);\n  };\n\n  const handleMouseUp = () => {\n    synth.triggerRelease();\n  };\n\n  const keys: IKey[] = [\n    { key: 'C4' },\n    { key: 'C#4', color: 'black', style: { left: '65px' } },\n    { key: 'D4' },\n    { key: 'Eb4', color: 'black', style: { left: '200px' } },\n    { key: 'E4' },\n    { key: 'F4' },\n    { key: 'F#4', color: 'black', style: { left: '440px' } },\n    { key: 'G4' },\n    { key: 'G#4', color: 'black', style: { left: '570px' } },\n    { key: 'A4' },\n    { key: 'Bb4', color: 'black', style: { left: '700px' } },\n    { key: 'B4' },\n    { key: 'C5' }\n  ];\n\n  return (\n    <div className=\"keyboard\">\n      {keys.map(k => (\n        <Key\n          key={k.key}\n          color={k.color}\n          style={k.style}\n          onTouchStart={() => handleMouseDown(k.key)}\n          onTouchEnd={handleMouseUp}\n          onMouseDown={() => handleMouseDown(k.key)}\n          onMouseUp={handleMouseUp}\n        ></Key>\n      ))}\n    </div>\n  );\n};\n\nexport default Keyboard;\n","import React from 'react';\nimport Keyboard from './components/keyboard';\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Keyboard></Keyboard>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}