{"version":3,"sources":["call-bar/styles.module.css","call-bar/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","center","slide-in","show","slide-out","hide","container","blinker","blinker-transitions","blink","call-bar","controls","answer","hangup","CallBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleHangUp","setState","hangUp","handleAnswer","answered","state","blinkerClass","displayTransition","styles","isRinging","react_default","a","createElement","className","join","onClick","React","Component","App","makeACall","call_bar_CallBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2EACAA,EAAAC,QAAA,CAAkBC,OAAA,uBAAAC,WAAA,yBAAAC,KAAA,qBAAAC,YAAA,0BAAAC,KAAA,qBAAAC,UAAA,0BAAAC,QAAA,wBAAAC,sBAAA,oCAAAC,MAAA,sBAAAC,WAAA,yBAAAC,SAAA,yBAAAC,OAAA,uBAAAC,OAAA,yMCEGC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAKRQ,aAAe,WACbP,EAAKQ,SAAS,CAAEC,QAAQ,KAPPT,EAUnBU,aAAe,WACbV,EAAKQ,SAAS,CAAEG,UAAU,KAR1BX,EAAKY,MAAQ,CAAEH,QAAQ,EAAOE,UAAU,GAHvBX,wEAejB,IAAIa,EAAe,KACfC,EAAoB,KAcxB,OAZIX,KAAKS,MAAMH,OACbK,EAAoBC,IAAO,aAClBZ,KAAKJ,MAAMiB,YACpBF,EAAoBC,IAAO,aAGzBZ,KAAKS,MAAMD,SACbE,EAAe,KACNV,KAAKJ,MAAMiB,YACpBH,EAAeE,IAAO,wBAItBE,EAAAC,EAAAC,cAAA,OAAKC,UAAW,CAACL,IAAO9B,OAAQ6B,GAAmBO,KAAK,MACtDJ,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,IAAOzB,WACrB2B,EAAAC,EAAAC,cAAA,OAAKC,UAAW,CAACL,IAAOxB,QAASsB,GAAcQ,KAAK,MAClDJ,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,IAAO,aACrBE,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,IAAOpB,UACrBsB,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,IAAOlB,OAAQyB,QAASnB,KAAKI,cAA7C,KAGAU,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,IAAOnB,OAAQ0B,QAASnB,KAAKO,cAA7C,iBAxCqBa,IAAMC,WCyB5BC,qBAvBb,SAAAA,EAAY1B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsB,IACjBzB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwB,GAAAnB,KAAAH,KAAMJ,KAMR2B,UAAY,WACV1B,EAAKQ,SAAS,CAAEQ,WAAW,KAN3BhB,EAAKY,MAAQ,CACXI,WAAW,GAHIhB,wEAYjB,OACEiB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQG,QAASnB,KAAKuB,WAAtB,eACAT,EAAAC,EAAAC,cAACQ,EAAD,CAASX,UAAWb,KAAKS,MAAMI,qBAjBvBQ,cCQEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dd4861ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"center\":\"styles_center__kjUtY\",\"slide-in\":\"styles_slide-in__3E1PQ\",\"show\":\"styles_show__2D4V2\",\"slide-out\":\"styles_slide-out__BlIBh\",\"hide\":\"styles_hide__2_e5x\",\"container\":\"styles_container__1RPo8\",\"blinker\":\"styles_blinker__1gN-S\",\"blinker-transitions\":\"styles_blinker-transitions__23LsD\",\"blink\":\"styles_blink__pgpXx\",\"call-bar\":\"styles_call-bar__2pnvi\",\"controls\":\"styles_controls__VfP-l\",\"answer\":\"styles_answer__Z8lFr\",\"hangup\":\"styles_hangup__20_9Y\"};","import React from 'react';\nimport styles from './styles.module.css';\n\nexport default class CallBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { hangUp: false, answered: false };\n  }\n\n  handleHangUp = () => {\n    this.setState({ hangUp: true });\n  };\n\n  handleAnswer = () => {\n    this.setState({ answered: true });\n  };\n\n  render() {\n    let blinkerClass = null;\n    let displayTransition = null;\n\n    if (this.state.hangUp) {\n      displayTransition = styles['slide-out'];\n    } else if (this.props.isRinging) {\n      displayTransition = styles['slide-in'];\n    }\n\n    if (this.state.answered) {\n      blinkerClass = null;\n    } else if (this.props.isRinging) {\n      blinkerClass = styles['blinker-transitions'];\n    }\n\n    return (\n      <div className={[styles.center, displayTransition].join(' ')}>\n        <div className={styles.container}>\n          <div className={[styles.blinker, blinkerClass].join(' ')}>\n            <div className={styles['call-bar']}>\n              <div className={styles.controls}>\n                <div className={styles.hangup} onClick={this.handleHangUp}>\n                  H\n                </div>\n                <div className={styles.answer} onClick={this.handleAnswer}>\n                  A\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport CallBar from './call-bar';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isRinging: false\n    };\n  }\n\n  makeACall = () => {\n    this.setState({ isRinging: true });\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"App\">\n          <button onClick={this.makeACall}>Make a call</button>\n          <CallBar isRinging={this.state.isRinging} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}